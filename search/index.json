[{"content":"推荐使用Btrfs作为根文件系统，XFS作为/home的文件系统\n非btrfs文件系统（无COW支持） 方案思路 每次进行备份时若在上一次备份中找到相同的文件，使用硬链接直接指向上次的文件，几乎不额外占用空间；若有新的文件，直接复制即可\n方案实现 使用rsync工具的\u0026ndash;link-dest选项\n This option behaves like \u0026ndash;copy-dest, but unchanged files are hard linked from DIR to the destination directory. The files must be identical in all preserved attributes (e.g. permissions, possibly ownership) in order for the files to be linked together. An example:\nrsync -av --link-dest=$PWD/prior_dir host:src_dir/ new_dir/\nIf file\u0026rsquo;s aren\u0026rsquo;t linking, double-check their attributes. Also check if some attributes are getting forced outside of rsync\u0026rsquo;s control, such a mount option that squishes root to a single user, or mounts a removable drive with generic ownership (such as OS X\u0026rsquo;s \u0026ldquo;Ignore ownership on this volume\u0026rdquo; option).\n 完整命令为\nrsync / \\ # 备份root目录 --archive \\ # 展开为 -rlptgoD --one-file-system \\ # 只备份单文件系统 --verbose \\ # 显示详细信息 --link-dest /path/to/last/backup \\ # 指定上次备份地址 /path/to/new/backup # 指定此次备份地址 也可编写脚本创建一个软链接指向最后一次备份地址，每次备份后更新该软链接的指向，新地址使用date命令创建基于时间的目录名。\n其他可参考链接：\n rsync+btrfs+dm-crypt 备份整个系统「依云」  尝试使用前先理解各个选项的意义，避免出现不可恢复的问题（误删重要数据）\nBtrfs文件系统 btrfs简介与使用方法参考Archwiki：Btrfs\n由于btrfs的写时复制特性，btrfs快照时可以随时生成与恢复，不需要额外的等待时间。\n子卷划分方案 / ├─@root 挂载至 / ├─@home 挂载至 /home ├─@pkg 挂载至 /var/cache/pacman/pkg # pacman包管理缓存 ├─@snapshots 挂载至 /.snapshots # snapper备份的快照存放在此 └─var/log 挂载至 /var/log # 系统恢复时保留旧的log文件 Snapper 安装snap-pac软件包，每次执行pacman动作时，pacman钩子自动完成root的快照构建。\n若在某次系统更新后出现bug，可直接使用snapper回退整个根文件系统，或使用Archiso修改grub引导选项，直接从快照启动。\n","date":"2020-12-12T00:00:00Z","permalink":"http://blog.yrvsyh.top/p/archlinux%E7%B3%BB%E7%BB%9F%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E6%8A%80%E5%B7%A7/","title":"Archlinux系统备份恢复技巧"},{"content":"单网口方案 路由器配置 由于只有一个网卡，LAN流量与WAN流量都需要经过此网卡，需要对LAN流量和WAN流量进行隔离，所以选择使用vlan划分网络。\nOpenWrt基于linux系统，可直接对物理网卡划分vlan：假设物理网卡为eth0，新建虚拟网卡eth0.1、eth0.2即可分别接收vlan1、valn2的数据包。\n将网卡eth0.1分为LAN组（或与无线网卡桥接），eth0.2分为WAN组。\nWAN口 配置接口的ip获取方式为DHCP方式，自动获取校园网分配的ip。\nLAN口 设置静态ip地址，如192.168.0.254。打开该接口上的DHCP服务器，为宿舍内网设备提供ip分配。\nMentoHUST插件 启用该服务（支持锐捷，其他协议自行尝试）。\n接口选择eth0.2，即与校园网相连的接口。\n防火墙 打开IP动态伪装\n 打开IP动态伪装 \n交换机配置 使用交换机划分vlan，连接路由器的端口与连接校园网的端口作为一组vlan，连接局域网上设备的端口作为另一组vlan。\n VLAN配置 \n PVID配置 \n配置说明：\n  数据包流入流出tagged端口时保留携带的tag号。\n  数据包流入流出untagged端口时清除携带的tag号。\n  PVID为无tag的数据包进入某一端口后带上的tag号。\n  此时1-5号端口为局域网端口，6、8号端口可连接校园网，7号端口连接路由器。\n现在假设1号端口连接PC，8号连接校园网，分析数据包路径如下：\nPC的出站流量 PC（无tag） -\u0026gt; 入1号端口（tag 1） -- 此数据包只能从VLAN1的成员端口流出（即1-5、7） -\u0026gt; 出7号端口（tag1保留） -\u0026gt; 路由器eht0.1（tag1） -\u0026gt; 路由器处理 -\u0026gt; 路由器eht0.2（tag2） -\u0026gt; 入7号端口（tag2保留） -- 此数据包只能从VLAN2的成员端口流出（即6-8） -\u0026gt; 出8号端口（无tag） -\u0026gt; 校园网 PC的入站流量 校园网 -\u0026gt; 入8号端口（tag2） -- 此数据包只能从VLAN2的成员端口流出（即6-8） -\u0026gt; 出7号端口（tag2保留） -\u0026gt; 路由器eht0.2（tag2） -\u0026gt; 路由器处理 -\u0026gt; 路由器eht0.1（tag1） -\u0026gt; 入7号端口（tag1保留） -- 此数据包只能从VLAN1的成员端口流出（即1-5、7） -\u0026gt; 出1号端口（无tag） -\u0026gt; PC 多网口方案 参考单网口方案，忽略交换机部分，正确配置WAN口即可。\n","date":"2020-12-12T00:00:00Z","permalink":"http://blog.yrvsyh.top/p/%E5%AE%BF%E8%88%8D%E5%8D%83%E5%85%86%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E7%BD%91%E6%96%B9%E6%A1%88%E5%85%B1%E4%BA%AB%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/","title":"宿舍千兆局域网组网方案（共享校园网、科学上网）"},{"content":"gcc内联汇编格式：\nasm ( assembler template : output operands /* optional */ : input operands /* optional */ : list of clobbered registers /* optional */ ); #include \u0026lt;stdio.h\u0026gt; void printStack() { unsigned long int *rbp = 0; unsigned long int *rsp = 0; // 当前rbp为上一层rsp-2，存放上一层的rbp  __asm__(\u0026#34;movq %%rbp, %0\u0026#34; : \u0026#34;=r\u0026#34;(rsp) : :); rbp = (unsigned long int *)*rsp; rsp += 2; printf(\u0026#34;0x%016lX -\u0026gt; 0x%016lX \u0026lt;- rsp\\n\u0026#34;, rsp, *rsp++); while (rbp - rsp \u0026gt; 0) { printf(\u0026#34;0x%016lX -\u0026gt; 0x%016lX\\n\u0026#34;, rsp, *rsp++); } printf(\u0026#34;0x%016lX -\u0026gt; 0x%016lX \u0026lt;- rbp\\n\u0026#34;, rsp, *rsp++); // rbp后一个值为函数返回地址  printf(\u0026#34;0x%016lX -\u0026gt; 0x%016lX \u0026lt;- ret\\n\u0026#34;, rsp, *rsp++); } long int func() { volatile long int buf[2] = {0}; volatile long int a = 0xFFF; volatile char b = 0xB; volatile int c = 0xFF; volatile char d = 0xD; printStack(); return a; } int main(int argc, char const *argv[]) { volatile long int r = func(); printStack(); return 0; } 运行结果：\n0x00007FFDF8AEC598 -\u0026gt; 0x000000FF0D0B5040 \u0026lt;- rsp 0x00007FFDF8AEC5A0 -\u0026gt; 0x0000000000000FFF 0x00007FFDF8AEC5A8 -\u0026gt; 0x0000000000000000 0x00007FFDF8AEC5B0 -\u0026gt; 0x0000000000000000 0x00007FFDF8AEC5B8 -\u0026gt; 0x00007F19ED4964A0 0x00007FFDF8AEC5C0 -\u0026gt; 0x4376A2C741749C00 0x00007FFDF8AEC5C8 -\u0026gt; 0x00007FFDF8AEC5F0 \u0026lt;- rbp 0x00007FFDF8AEC5D0 -\u0026gt; 0x000055CC0E4F62A1 \u0026lt;- ret 0x00007FFDF8AEC5D8 -\u0026gt; 0x00007FFDF8AEC6E8 \u0026lt;- rsp 0x00007FFDF8AEC5E0 -\u0026gt; 0x000000010E4F6050 0x00007FFDF8AEC5E8 -\u0026gt; 0x00007FFDF8AEC6E0 0x00007FFDF8AEC5F0 -\u0026gt; 0x0000000000000FFF 0x00007FFDF8AEC5F8 -\u0026gt; 0x000055CC0E4F62C0 \u0026lt;- rbp 0x00007FFDF8AEC600 -\u0026gt; 0x00007F19ED29E152 \u0026lt;- ret ","date":"2020-12-10T00:00:00Z","permalink":"http://blog.yrvsyh.top/p/x64%E5%B9%B3%E5%8F%B0gcc%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E6%89%93%E5%8D%B0%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%A0%86%E6%A0%88/","title":"x64平台gcc内联汇编打印函数调用堆栈"},{"content":"数组中重复的数字 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n 根据空间时间分析。空间：排序；时间：哈希表，字典。  二维数组中的查找 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n  根据对角线判断，考虑nm不相同的情况。\n  右上角作为起点，相当于二叉搜索树。\n  替换空格 请实现一个函数，把字符串 s 中的每个空格替换成\u0026quot;%20\u0026quot;。\n  java版直接使用replace。\n  遍历字符串，分情况追加字符。\n  从尾到头打印链表 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n  先找到尾指针，计算出链表的长度，分配相应长度的数组，反向遍历数组同时正向遍历链表，逐个插入。\n  正向遍历链表入栈，出栈存入数组。\n  重建二叉树 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n  前序遍历第一个为根节点，根据根节点在中序遍历的位置找到左子树和右子树，递归左右子树。\n   时间复杂度：O(n)。对于每个节点都有创建过程以及根据左右子树重建过程。\n  空间复杂度：O(n)。存储整棵树的开销。\n   class Solution { private: unordered_map\u0026lt;int, int\u0026gt; findIndex; int index = 0; public: TreeNode* buildTree(vector\u0026lt;int\u0026gt;\u0026amp; preorder, vector\u0026lt;int\u0026gt;\u0026amp; inorder) { for(int i = 0; i \u0026lt; inorder.size(); i++) findIndex[inorder[i]] = i; //建立数组值到索引的映射  return build(preorder, 0, inorder.size() - 1); } TreeNode* build(vector\u0026lt;int\u0026gt;\u0026amp; preorder, int start, int end){ if(start \u0026gt; end) return NULL; // 中序的start和end  int i = findIndex[preorder[index]]; TreeNode *tree = new TreeNode(preorder[index++]); tree-\u0026gt;left = build(preorder, start, i - 1); tree-\u0026gt;right = build(preorder, i + 1, end); return tree; } };   如果使用栈来解决首先要搞懂一个知识点，就是前序遍历挨着的两个值比如m和n，他们会有下面两种情况之一的关系。\n  n是m左子树节点的值。\n  n是m右子树节点的值或者是m某个祖先节点的右节点的值。\n     对于第一个知识点我们很容易理解，如果m的左子树不为空，那么n就是m左子树节点的值。\n  对于第二个问题，如果一个结点没有左子树只有右子树，那么n就是m右子树节点的值，如果一个结点既没有左子树也没有右子树，那么n就是m某个祖先节点的右节点，我们只要找到这个祖先节点就好办了。\n   public TreeNode buildTree(int[] preorder, int[] inorder) { if (preorder.length == 0) return null; Stack\u0026lt;TreeNode\u0026gt; s = new Stack\u0026lt;\u0026gt;(); //前序的第一个其实就是根节点  TreeNode root = new TreeNode(preorder[0]); TreeNode cur = root; for (int i = 1, j = 0; i \u0026lt; preorder.length; i++) { //第一种情况  if (cur.val != inorder[j]) { cur.left = new TreeNode(preorder[i]); s.push(cur); cur = cur.left; } else { //第二种情况  j++; //找到合适的cur，然后确定他的右节点  while (!s.empty() \u0026amp;\u0026amp; s.peek().val == inorder[j]) { cur = s.pop(); j++; } //给cur添加右节点  cur = cur.right = new TreeNode(preorder[i]); } } return root; }   用两个栈实现队列 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )\n 第一个栈直接插入，第二个栈直接删除。如果删除的时候为空，第一个栈元素全部出栈压入第二个栈，再进行删除操作， 此时还是空就返回-1。  斐波那契数列 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项。斐波那契数列的定义如下：\n F(0) = 0, F(1) = 1\n  F(N) = F(N - 1) + F(N - 2), 其中 N \u0026gt; 1.\n 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n 非递归，两个变量交替前进。（动态规划）  青蛙跳台阶问题 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n 同 斐波那契数列  旋转数组的最小数字 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组 [3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。\n  二分查找。将中间值与最后一个元素比较。比最后一个元素小说明当前元素在最小值右侧，比最后一个元素大则在左侧。\n  分治递归。左边比右边小，左边一定是最小值。\npublic class Solution { public int minArray(int[] nums) { int len = nums.length; return minArray(nums, 0, len - 1); } private int minArray(int[] nums, int left, int right) { if (left + 1 \u0026gt;= right) { return Math.min(nums[left], nums[right]); } if (nums[left] \u0026lt; nums[right]) { return nums[left]; } int mid = left + (right - left) / 2; return Math.min(minArray(nums, left, mid - 1), minArray(nums, mid, right)); } }   矩阵中的路径 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。\n[[\u0026ldquo;a\u0026rdquo;,\u0026quot;b\u0026quot;,\u0026ldquo;c\u0026rdquo;,\u0026ldquo;e\u0026rdquo;],\n[\u0026ldquo;s\u0026rdquo;,\u0026quot;f\u0026quot;,\u0026quot;c\u0026quot;,\u0026ldquo;s\u0026rdquo;],\n[\u0026ldquo;a\u0026rdquo;,\u0026ldquo;d\u0026rdquo;,\u0026quot;e\u0026quot;,\u0026ldquo;e\u0026rdquo;]]\n但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。\n  深度优先搜索，回溯。下标越界或当前值不满足直接返回false。否则标记当前值，进行上下左右方向的搜索，只要有一个方向成功返回true这次搜索就为true。搜索完成后返回前恢复被标记的值。搜索到word的最后一个字符时也为true。\n   时间复杂度 O(3^KMN) ： 最差情况下，需要遍历矩阵中长度为 K 字符串的所有方案，时间复杂度为 O(3^K) ；矩阵中共有 MN个起点，时间复杂度为 O(MN) 。\n方案数计算： 设字符串长度为 K ，搜索中每个字符有上、下、左、右四个方向可以选择，舍弃回头（上个字符）的方向，剩下 33 种选择，因此方案数的复杂度为 O(3^K) 。\n  空间复杂度 O(K) ： 搜索过程中的递归深度不超过 K ，因此系统因函数调用累计使用的栈空间占用 O(K) （因为函数返回后，系统调用的栈空间会释放）。最坏情况下 K = MN ，递归深度为 MN ，此时系统栈使用 O(MN) 的额外空间。\n     机器人的运动范围 地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？\n  k增大时新来的可访问格子都在之前最边界的右下方。搜索时只需要向下向右搜索。\n  把第一个压入队列，出队时判断右下两个方向是否满足，满足就入队，计数加一，直到队空。与二叉树的层次遍历方法类似\n  不满足返回0，满足返回1+递归左右的结果。\n  剪绳子 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n\u0026gt;1并且m\u0026gt;1），每段绳子的长度记为 k[0],k[1]\u0026hellip;k[m-1] 。请问 k[0]*k[1]*\u0026hellip;*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n 动态规划。两次遍历。dp[i] = max(dp[i], max((i - j) * j, j * dp[i - j]))  二进制中1的个数 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n  循环右移\u0026amp;1判断记数。\n  n\u0026amp;(n−1) ：二进制数字 n 最右边的 1 变成 0 ，其余不变。减少判断次数。\n  数值的整数次方 实现函数double Power(double base, int exponent)，求base的exponent次方。不得使用库函数，同时不需要考虑大数问题。\n  递归求base^2的n/2次方。偶数的时候计算Power(base*base, exponent/2)，计数的时候计算base*Power(base*base, exponent/2)\n  快速幂。将n拆分为2的幂之和。将n循环右移，并使x *= x，判断最后一位是否为1，如果是1，将结果乘x，为0则跳过。\n  打印从1到最大的n位数 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n 大数问题。使用string存储数据，最后一位加一后判断进位，判断溢出。输出时找到最左边的非零位置，substring。  删除链表的节点 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。\n返回删除后的链表的头节点。\n 双指针。  正则表达式匹配 请实现一个函数用来匹配包含'. \u0026lsquo;和\u0026rsquo;*\u0026lsquo;的正则表达式。模式中的字符\u0026rsquo;.\u0026lsquo;表示任意一个字符，而\u0026rsquo;*\u0026lsquo;表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串\u0026quot;aaa\u0026quot;与模式\u0026quot;a.a\u0026quot;和\u0026quot;ab*ac*a\u0026quot;匹配，但与\u0026quot;aa.a\u0026quot;和\u0026quot;ab*a\u0026quot;均不匹配。\n表示数值的字符串 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串\u0026quot;+100\u0026quot;、\u0026ldquo;5e2\u0026rdquo;、\u0026quot;-123\u0026quot;、\u0026ldquo;3.1416\u0026rdquo;、\u0026quot;-1E-16\u0026quot;、\u0026ldquo;0123\u0026quot;都表示数值，但\u0026quot;12e\u0026rdquo;、\u0026ldquo;1a3.14\u0026rdquo;、\u0026ldquo;1.2.3\u0026rdquo;、\u0026quot;+-5\u0026quot;及\u0026quot;12e+5.4\u0026quot;都不是。\n调整数组顺序使奇数位于偶数前面 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。\n 定义一个指针p=0，表示当前遇到的奇数的个数。遍历一次，遇到奇数时和p位置交换，p++。  ","date":"2020-11-28T00:00:00Z","permalink":"http://blog.yrvsyh.top/p/%E5%89%91%E6%8C%87offer%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/","title":"剑指offer刷题笔记"},{"content":"关于git hooks的介绍：\n 服务器端钩子 除了客户端钩子，作为系统管理员，你还可以使用若干服务器端的钩子对项目强制执行各种类型的策略。 这些钩子脚本在推送到服务器之前和之后运行。 推送到服务器前运行的钩子可以在任何时候以非零值退出，拒绝推送并给客户端返回错误消息，还可以依你所想设置足够复杂的推送策略。\npre-receive 处理来自客户端的推送操作时，最先被调用的脚本是 pre-receive。 它从标准输入获取一系列被推送的引用。如果它以非零值退出，所有的推送内容都不会被接受。 你可以用这个钩子阻止对引用进行非快进（non-fast-forward）的更新，或者对该推送所修改的所有引用和文件进行访问控制。\nupdate update 脚本和 pre-receive 脚本十分类似，不同之处在于它会为每一个准备更新的分支各运行一次。 假如推送者同时向多个分支推送内容，pre-receive 只运行一次，相比之下 update 则会为每一个被推送的分支各运行一次。 它不会从标准输入读取内容，而是接受三个参数：引用的名字（分支），推送前的引用指向的内容的 SHA-1 值，以及用户准备推送的内容的 SHA-1 值。 如果 update 脚本以非零值退出，只有相应的那一个引用会被拒绝；其余的依然会被更新。\npost-receive post-receive 挂钩在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。 它接受与 pre-receive 相同的标准输入数据。 它的用途包括给某个邮件列表发信，通知持续集成（continous integration）的服务器， 或者更新问题追踪系统（ticket-tracking system） —— 甚至可以通过分析提交信息来决定某个问题（ticket）是否应该被开启，修改或者关闭。 该脚本无法终止推送进程，不过客户端在它结束运行之前将保持连接状态， 所以如果你想做其他操作需谨慎使用它，因为它将耗费你很长的一段时间。\n 初始化裸仓库：\ngit init --bare blog.git 如何访问该裸仓库见服务器上的Git-协议\n编辑该仓库的post-receive文件。\n#!/bin/bash cd /blog \u0026amp;\u0026amp; \\ git --work-tree=. --git-dir=.git fetch \u0026amp;\u0026amp; \\ git --work-tree=. --git-dir=.git reset --hard FETCH_HEAD \u0026amp;\u0026amp; \\ hugo /blog为hugo项目的存放目录，此处git仓库对应的远程仓库为服务器上相应的裸仓库。\n添加远程仓库：\ngit remote add origin /var/lib/gitea/repos/yzy/blog.git 整个过程为 本地push至服务器裸仓库 \u0026ndash;\u0026gt; 服务器执行post-receive脚本，进入hugo项目目录，fetch远程仓库代码，更新hugo项目目录的相应文件 \u0026ndash;\u0026gt; 构建。\ngitignore文件：\n/* !.gitignore !config.toml !/content !/static/ 排除所有文件，添加白名单，跟踪hugo配置文件，content内的文章，static内的静态资源。\n本地push时即可查看hugo构建信息：\nremote: Building sites … remote: | ZH-HANS remote: -------------------+---------- remote: Pages | 17 remote: Paginator pages | 0 remote: Non-page files | 0 remote: Static files | 9 remote: Processed images | 0 remote: Aliases | 5 remote: Sitemaps | 1 remote: Cleaned | 0 remote: remote: Total in 40 ms ","date":"2020-06-24T00:00:00Z","permalink":"http://blog.yrvsyh.top/p/%E5%88%A9%E7%94%A8git-hooks%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5%E4%B8%8Ehugo%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA/","title":"利用git hooks实现文章同步与hugo自动构建"}]